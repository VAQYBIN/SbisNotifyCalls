import os
import logging
from dotenv import load_dotenv
from typing import List, Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class Config:
    # Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    BOT_TOKEN: str = os.getenv('BOT_TOKEN')

    # –ì—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    NOTIFIED_GROUPS: List[str] = os.getenv('NOTIFIED_GROUPS', '').split(',')

    # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    EMAIL_ACC: str = os.getenv('EMAIL_ACC')
    EMAIL_PASS: str = os.getenv('EMAIL_PASS')

    # Yandex IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    IMAP_SERVER: str = 'imap.yandex.ru'
    IMAP_PORT: int = 993

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = os.getenv('LOG_LEVEL', 'INFO').upper()
    LOG_FILE: str = os.getenv('LOG_FILE', 'bot.log')
    LOG_MAX_FILE_SIZE: int = int(
        os.getenv('LOG_MAX_FILE_SIZE', '10485760'))  # 10MB
    LOG_BACKUP_COUNT: int = int(os.getenv('LOG_BACKUP_COUNT', '5'))
    LOG_CONSOLE_OUTPUT: bool = os.getenv(
        'LOG_CONSOLE_OUTPUT', 'true').lower() in ('true', '1', 'yes', 'on')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    CHECK_INTERVAL: int = int(os.getenv('CHECK_INTERVAL', '30'))
    FILTER_SENDER: Optional[str] = os.getenv('FILTER_SENDER', None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    @classmethod
    def validate(cls):
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.EMAIL_ACC:
            raise ValueError("EMAIL_ACC –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.EMAIL_PASS:
            raise ValueError("EMAIL_PASS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.NOTIFIED_GROUPS or cls.NOTIFIED_GROUPS == ['']:
            raise ValueError("NOTIFIED_GROUPS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
        cls.NOTIFIED_GROUPS = [group.strip()
                               for group in cls.NOTIFIED_GROUPS if group.strip()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        valid_log_levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
        if cls.LOG_LEVEL not in valid_log_levels:
            logging.warning(
                f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π LOG_LEVEL: {cls.LOG_LEVEL}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è INFO")
            cls.LOG_LEVEL = 'INFO'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if cls.CHECK_INTERVAL < 10:
            logging.warning(
                f"‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π CHECK_INTERVAL: {cls.CHECK_INTERVAL}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 10 —Å–µ–∫—É–Ω–¥")
            cls.CHECK_INTERVAL = 10

        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        logging.info(f"üìß Email: {cls.EMAIL_ACC}")
        logging.info(f"üì± –ì—Ä—É–ø–ø –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(cls.NOTIFIED_GROUPS)}")
        logging.info(f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {cls.LOG_LEVEL}")
        logging.info(f"üìÅ –§–∞–π–ª –ª–æ–≥–æ–≤: {cls.LOG_FILE}")
        logging.info(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {cls.CHECK_INTERVAL} —Å–µ–∫")
        if cls.FILTER_SENDER:
            logging.info(f"üîç –§–∏–ª—å—Ç—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {cls.FILTER_SENDER}")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
Config.validate()
