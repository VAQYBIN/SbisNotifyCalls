import asyncio
import imaplib
import email
from email.header import decode_header
from email.utils import parseaddr
from typing import List, Dict, Optional
import ssl
from datetime import datetime, timedelta, timezone
from config import Config
import logging

logger = logging.getLogger(__name__)


class EmailReader:
    def __init__(self):
        self.imap = None
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—É—é –º–∏–Ω—É—Ç—É
        self.last_check_time = datetime.now(
            timezone.utc) - timedelta(minutes=1)

    async def ensure_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ—á—Ç–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º."""
        if not self.imap:
            return await self.connect()

        try:
            status, _ = self.imap.noop()
            if status != 'OK':
                raise imaplib.IMAP4.error(f"NOOP returned status {status}")
            return True
        except (
            imaplib.IMAP4.abort,
            imaplib.IMAP4.error,
            ssl.SSLError,
            ConnectionResetError,
            OSError,
        ) as error:
            logger.warning(
                f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º (noop): {error}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            self.disconnect()
            return await self.connect()

    async def connect(self, retry_count: int = 3) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É Yandex —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        for attempt in range(retry_count):
            try:
                # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = ssl.create_default_context()
                # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                context.minimum_version = ssl.TLSVersion.TLSv1_2

                logger.info(
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{retry_count} –∫ {Config.EMAIL_ACC}")

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
                self.imap = imaplib.IMAP4_SSL(
                    Config.IMAP_SERVER, Config.IMAP_PORT, ssl_context=context)

                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                result = self.imap.login(Config.EMAIL_ACC, Config.EMAIL_PASS)

                if result[0] == 'OK':
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ {Config.EMAIL_ACC}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result}")
                    if attempt < retry_count - 1:
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        await asyncio.sleep(5 * (attempt + 1))

            except (ssl.SSLError, ConnectionResetError, OSError,
                    imaplib.IMAP4.abort, imaplib.IMAP4.error) as ssl_error:
                logger.warning(
                    f"‚ö†Ô∏è SSL/–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}): {ssl_error}")
                if attempt < retry_count - 1:
                    await asyncio.sleep(5 * (attempt + 1))
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã")

            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {e}")
                if attempt < retry_count - 1:
                    await asyncio.sleep(5 * (attempt + 1))

        return False

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç IMAP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.imap:
                self.imap.close()
                self.imap.logout()
                self.imap = None
                logger.info("‚úÖ –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        except (imaplib.IMAP4.abort, imaplib.IMAP4.error) as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º): {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")

    def decode_mime_header(self, header: str) -> str:
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ MIME –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        try:
            decoded_parts = decode_header(header)
            decoded_header = ''

            for part, encoding in decoded_parts:
                if isinstance(part, bytes):
                    decoded_header += part.decode(encoding or 'utf-8')
                else:
                    decoded_header += part

            return decoded_header
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return header

    def get_email_body(self, msg) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞"""
        body = ""

        try:
            if msg.is_multipart():
                # –ü–∏—Å—å–º–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å—Ç–µ–π
                for part in msg.walk():
                    content_type = part.get_content_type()

                    if content_type == "text/plain":
                        charset = part.get_content_charset() or 'utf-8'
                        body = part.get_payload(decode=True).decode(
                            charset, errors='ignore')
                        break
                    elif content_type == "text/html" and not body:
                        # –ï—Å–ª–∏ –Ω–µ—Ç plain text, –±–µ—Ä–µ–º HTML
                        charset = part.get_content_charset() or 'utf-8'
                        html_body = part.get_payload(
                            decode=True).decode(charset, errors='ignore')
                        # –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤ (–¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BeautifulSoup)
                        import re
                        body = re.sub('<[^<]+?>', '', html_body)
            else:
                # –ü–∏—Å—å–º–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏
                charset = msg.get_content_charset() or 'utf-8'
                body = msg.get_payload(decode=True).decode(
                    charset, errors='ignore')

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞: {e}")
            body = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞"

        return body.strip()

    async def check_new_emails(self, sender_email: Optional[str] = None) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not await self.ensure_connection():
                return []

            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –≤—Ö–æ–¥—è—â–∏—Ö
                result = self.imap.select('INBOX')
                if result[0] != 'OK':
                    logger.warning(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É INBOX, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                    self.disconnect()
                    if not await self.connect():
                        return []
                    self.imap.select('INBOX')
            except (ConnectionResetError, ssl.SSLError, OSError,
                    imaplib.IMAP4.abort, imaplib.IMAP4.error) as conn_error:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏: {conn_error}")
                self.disconnect()
                if not await self.connect():
                    return []
                self.imap.select('INBOX')

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
            search_criteria = f'SINCE "{self.last_check_time.strftime("%d-%b-%Y")}"'

            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞
            if sender_email:
                search_criteria += f' FROM "{sender_email}"'

            # –ò—â–µ–º –ø–∏—Å—å–º–∞
            result, messages = self.imap.search(None, search_criteria)

            if result != 'OK':
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º")
                return []

            email_ids = messages[0].split()
            new_emails = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
            for email_id in email_ids:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                    result, msg_data = self.imap.fetch(email_id, '(RFC822)')

                    if result != 'OK':
                        continue

                    # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                    msg = email.message_from_bytes(msg_data[0][1])

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–∏—Å—å–º–∞
                    date_str = msg.get('Date')
                    email_date = email.utils.parsedate_to_datetime(date_str)

                    # –ü—Ä–∏–≤–æ–¥–∏–º email_date –∫ offset-aware, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if email_date.tzinfo is None:
                        email_date = email_date.replace(tzinfo=timezone.utc)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–µ
                    if email_date <= self.last_check_time:
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Å—å–º–µ
                    subject = self.decode_mime_header(msg.get('Subject', ''))
                    from_header = msg.get('From', '')
                    from_name, from_email = parseaddr(from_header)
                    from_name = self.decode_mime_header(
                        from_name) if from_name else from_email

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
                    body = self.get_email_body(msg)

                    email_info = {
                        'id': email_id.decode(),
                        'subject': subject,
                        'from_name': from_name,
                        'from_email': from_email,
                        'body': body,
                        'date': email_date
                    }

                    new_emails.append(email_info)
                    logger.info(f"üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ: {subject} –æ—Ç {from_name}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {email_id}: {e}")
                    continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_check_time = datetime.now(timezone.utc)

            return new_emails

        except (ssl.SSLError, ConnectionResetError, OSError,
                imaplib.IMAP4.abort, imaplib.IMAP4.error) as conn_error:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Å–µ–º: {conn_error}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.disconnect()
            return []
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º: {e}")
            return []

    async def run_email_monitoring(self, callback, sender_email: Optional[str] = None, check_interval: int = 30):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã"""
        logger.info(
            f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {check_interval} —Å–µ–∫—É–Ω–¥)")

        while True:
            try:
                new_emails = await self.check_new_emails(sender_email)

                for email_info in new_emails:
                    await callback(email_info)

                await asyncio.sleep(check_interval)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.disconnect()
                await asyncio.sleep(check_interval)

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.disconnect()
