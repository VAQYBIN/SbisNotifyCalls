import re
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from email_reader import EmailReader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class EmailBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Ç–∞—Ç–µ–ª—è –ø–æ—á—Ç—ã
        self.email_reader = EmailReader()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.emails_processed = 0
        self.start_time = datetime.now()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.dp.message(Command("start"))
        async def start_command(message: Message):
            """–ö–æ–º–∞–Ω–¥–∞ /start - —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.chat.type != 'private':
                return

            await message.reply(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n\n"
                "üîç –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—é –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã.\n\n"
                "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"
            )

        @self.dp.message(Command("status"))
        async def status_command(message: Message):
            """–ö–æ–º–∞–Ω–¥–∞ /status - —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.chat.type != 'private':
                return

            uptime = datetime.now() - self.start_time
            uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã

            status_text = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
                f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
                f"üìß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {self.emails_processed}\n"
                f"üì± –ì—Ä—É–ø–ø –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(Config.NOTIFIED_GROUPS)}\n"
                f"‚úâÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã: {Config.EMAIL_ACC}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
            )

            await message.reply(status_text, parse_mode='HTML')

        @self.dp.message(Command("help"))
        async def help_command(message: Message):
            """–ö–æ–º–∞–Ω–¥–∞ /help - —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.chat.type != 'private':
                return

            help_text = (
                "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É "
                "–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã.\n\n"
                "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                "‚Ä¢ /status - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞\n"
                "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
                "–ë–æ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.\n\n"
                "‚ÑπÔ∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n"
                "–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
            )

            await message.reply(help_text, parse_mode='HTML')

    def clean_email_body(self, body: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
        # –£–¥–∞–ª–∏—Ç—å CSS —Å—Ç–∏–ª–∏ –∏ HTML —Ç–µ–≥–∏
        body = re.sub(r'<style.*?>.*?</style>', '', body, flags=re.DOTALL)
        body = re.sub(r'<[^>]+>', '', body)

        # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç "–û—Ç–ø–∏—à–∏—Ç–µ—Å—å" –∏ –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        body = re.sub(r'–û—Ç–ø–∏—à–∏—Ç–µ—Å—å.*$', '', body, flags=re.DOTALL)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø—Ä–æ–±–µ–ª–∞–º–∏
        full_text = ' '.join(body.splitlines())

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        result = []

        # –ò—â–µ–º –ù–æ–º–µ—Ä
        number_match = re.search(
            r'–ù–æ–º–µ—Ä\s*-\s*([^\\]*?)(?=\s*\\\s*–§–ò–û|$)', full_text, re.IGNORECASE)
        if number_match:
            number_value = number_match.group(1).strip()
            result.append(f"–ù–æ–º–µ—Ä - {number_value}")

        # –ò—â–µ–º –§–ò–û
        name_match = re.search(
            r'–§–ò–û\s*-\s*([^\\]*?)(?=\s*\\\s*–í—Ä–µ–º—è|$)', full_text, re.IGNORECASE)
        if name_match:
            name_value = name_match.group(1).strip()
            result.append(f"–§–ò–û - {name_value}")

        # –ò—â–µ–º –í—Ä–µ–º—è
        time_match = re.search(
            r'–í—Ä–µ–º—è\s*-\s*([^\\]*?)(?=\s*\\|$)', full_text, re.IGNORECASE)
        if time_match:
            time_value = time_match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_value = re.sub(r'\s+', ' ', time_value)
            result.append(f"–í—Ä–µ–º—è - {time_value}")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        if not result:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª–µ—à–∞–º
            parts = full_text.split('\\')

            for part in parts:
                part = part.strip()
                if any(keyword in part.lower() for keyword in ['–Ω–æ–º–µ—Ä -', '—Ñ–∏–æ -', '–≤—Ä–µ–º—è -']):
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                    cleaned_part = re.sub(r'\s+', ' ', part).strip()
                    if cleaned_part and len(cleaned_part) > 3:
                        result.append(cleaned_part)

        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ—á–∏—â–µ–Ω–Ω—ã–π)
        if not result:
            cleaned_body = re.sub(r'\s+', ' ', full_text).strip()
            return cleaned_body[:500] if cleaned_body else "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∏—Å—å–º–∞"

        return '\n'.join(result)

    async def format_email_message(self, email_info: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        body = self.clean_email_body(email_info['body'])

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(body) > 2000:
            body = body[:2000] + '...'

        message_text = (
            "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n"
            f"{body}"
        )

        return message_text

    async def send_to_groups(self, message_text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""

        for group_id in Config.NOTIFIED_GROUPS:
            try:
                await self.bot.send_message(
                    chat_id=group_id,
                    text=message_text,
                    parse_mode='HTML'
                )
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    # –£–±–∏—Ä–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è fallback
                    plain_text = message_text.replace(
                        '<b>', '').replace('</b>', '')
                    plain_text = plain_text.replace(
                        '<code>', '').replace('</code>', '')
                    plain_text = plain_text.replace(
                        '<pre>', '').replace('</pre>', '')

                    await self.bot.send_message(
                        chat_id=group_id,
                        # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                        text=plain_text[:4096]
                    )
                    logger.info(
                        f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É {group_id} —É—Å–ø–µ—à–Ω–∞")

                except Exception as e2:
                    logger.error(
                        f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e2}")

    async def handle_new_email(self, email_info: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞"""
        try:
            logger.info(
                f"üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: {email_info['subject']}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = await self.format_email_message(email_info)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã
            await self.send_to_groups(message_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.emails_processed += 1

            logger.info("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")

    async def start_monitoring(self, sender_email: str = None, check_interval: int = 30):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        monitoring_task = asyncio.create_task(
            self.email_reader.run_email_monitoring(
                callback=self.handle_new_email,
                sender_email=sender_email,
                check_interval=check_interval
            )
        )

        return monitoring_task

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã
            monitoring_task = await self.start_monitoring()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

            # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞
            polling_task = asyncio.create_task(
                self.dp.start_polling(self.bot)
            )

            logger.info("üéØ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
            await asyncio.gather(monitoring_task, polling_task)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ—á—Ç–æ–π
            self.email_reader.disconnect()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            await self.bot.session.close()

            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = EmailBot()

    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.shutdown()


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
