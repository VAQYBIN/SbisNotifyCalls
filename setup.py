#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Email to Telegram Bot
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è setup —Å–∫—Ä–∏–ø—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        logger.error(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    logger.info(
        f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    try:
        subprocess.check_call(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    logger.info("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...")

    env_file = Path(".env")
    env_example = Path(".env.example")

    if not env_file.exists():
        if env_example.exists():
            logger.info("üìã .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∏–∑ .env.example")
            env_example.rename(env_file)
            logger.info("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            logger.warning("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
        else:
            logger.error("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
            logger.info("BOT_TOKEN=–≤–∞—à-—Ç–æ–∫–µ–Ω")
            logger.info("NOTIFIED_GROUPS=id-–≥—Ä—É–ø–ø—ã")
            logger.info("EMAIL_ACC=–ø–æ—á—Ç–∞@yandex.ru")
            logger.info("EMAIL_PASS=–ø–∞—Ä–æ–ª—å")
            return False
    else:
        logger.info("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    try:
        from dotenv import load_dotenv
        load_dotenv()

        required_vars = ['BOT_TOKEN', 'NOTIFIED_GROUPS',
                         'EMAIL_ACC', 'EMAIL_PASS']
        missing_vars = []

        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)

        if missing_vars:
            logger.error(
                f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            return False

        logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

    except ImportError:
        logger.warning(
            "‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        return True


def create_systemd_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è Linux)"""
    if os.name != 'posix':
        return

    logger.info("\nüîß –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞? (y/N): ")
    response = input().lower().strip()

    if response not in ['y', 'yes', '–¥–∞']:
        return

    current_dir = Path.cwd()
    python_path = sys.executable

    service_content = f"""[Unit]
Description=Email to Telegram Bot
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'root')}
WorkingDirectory={current_dir}
Environment=PATH={os.getenv('PATH')}
ExecStart={python_path} main.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""

    service_path = Path("/etc/systemd/system/email-telegram-bot.service")

    try:
        logger.info(f"–°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å: {service_path}")
        logger.info("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        with open("email-telegram-bot.service", "w") as f:
            f.write(service_content)

        subprocess.run(
            ["sudo", "cp", "email-telegram-bot.service", str(service_path)], check=True)
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "enable",
                       "email-telegram-bot"], check=True)

        logger.info("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        logger.info("  sudo systemctl start email-telegram-bot    # –ó–∞–ø—É—Å—Ç–∏—Ç—å")
        logger.info("  sudo systemctl stop email-telegram-bot     # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        logger.info("  sudo systemctl status email-telegram-bot   # –°—Ç–∞—Ç—É—Å")
        logger.info("  sudo systemctl logs email-telegram-bot     # –õ–æ–≥–∏")

        os.remove("email-telegram-bot.service")

    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
    except PermissionError:
        logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Email to Telegram Bot\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if not check_python_version():
        return False

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
    if not check_env_file():
        return False

    # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    create_systemd_service()

    logger.info("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    logger.info("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    logger.info("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ IMAP –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Yandex.–ü–æ—á—Ç—ã")
    logger.info("3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ Telegram –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    logger.info("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")

    return True


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
